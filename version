#!/bin/bash 

USAGE="""
Usage: ./version -t TAG [ OPTIONS ]
    -t --tag
        Specify the tag to apply to the repositories.
    -p --path
        The path in which to search for repos. Default is $PWD.
    -r --remote
        The remote on which to work in git. Default is origin.
    -m --major
        Indicate if this is a new major version, need -t with major version number.
    --nopush
        Do not push tag to remote. Default is false.
"""

_push () {
    local to_push; to_push=$1;
    if [ "$NO_PUSH" == false ]; then
        git push -u "$REMOTE" "$to_push" >/dev/null
    fi
}

_tag_repository() {
    local repo; repo="$1"
    local version; local commit;
    cd "$repo" || return 1

    version=$(echo "$TAG" | grep -Po '^(\d+\.\d+)')

    git fetch -p "$REMOTE" "coog-$version" >/dev/null
    commit="$(git rev-list -n 1 "$REMOTE/coog-$version")"
    echo "Creating tag $TAG on $commit"
    git tag -a "coog-$TAG" "$commit" -m "Version created: $(date --iso)" >/dev/null
    _push "coog-$TAG"
}


_tag_customers() {
    local repo; repo="$1"
    local version; local commit; local client;
    cd "$repo" || return 1

    git fetch -p "$REMOTE" >/dev/null
    version=$(echo "$TAG" | grep -Po '^(\d+\.\d+)')
    for branch in $(git branch -r | grep -Po "$REMOTE/\w+-coog-$version"); do
        echo "${branch//\// }" | xargs git fetch -p 2>/dev/null
        commit=$(git rev-list -n 1 "$branch")
        client=$(echo "$branch" | sed -E "s:$REMOTE\/(\w+)-coog-$version:\1:")
        echo "Applying tag $TAG to $branch"
        git tag -a "$client-coog-$TAG" "$commit" -m "Version created: $(date --iso)" >/dev/null
        _push "$client"-coog"-$TAG" 
    done
}


update_tryton_cfg() {
    local full_version; full_version=$1
    find . -name tryton.cfg -exec \
        sed -i "/version=/c\version=$full_version" {} +
}

update_client_version() {
    local full_version; full_version=$1
    find . -name __init__.py -exec \
        sed -i "/__version_coog__ = /c\__version_coog__ = \"$full_version\"" {} +
}

update_doc() {
    local short_version; short_version=$1
    sed -i "/version = /c\version = \'$short_version\'" ./doc/user_manual/conf.py
}

create_and_push_new_branch() {
    local new_branch; new_branch=$1
    git checkout -b "$new_branch"
    echo "Create new branch $new_branch"
    _push $new_branch
}

update_version() {
    local repo; repo="$1"
    local TAG; TAG="$2"
    local version; local local_branch;

    echo "Updating version number for $repo to $TAG"

    cd $repo || return 1
    echo "$repo"

    if [ "$MAJOR" == false ]; then
        version=$(echo "coog-$TAG" | grep -Po '^(coog-\d+\.\d+)')
    else
        version='master'
    fi

    if [ "$(basename "$repo")" == "coog" ]; then
        git checkout "$version" 
        git pull

        if [ "$MAJOR" == false ]; then
            update_tryton_cfg $TAG
            git commit -am "packaging version $TAG"
            _push $version
        fi

        if [ "$MAJOR" == true ]; then
            local full_version; full_version="coog-$TAG.0"
            update_tryton_cfg "$TAG.0"
            find . -name CHANGELOG | xargs -I {} sed -i "1iVersion $TAG - `date --iso`" {}
            update_doc $TAG
            git commit -am "Prepare release $full_version"
            git tag -a "$full_version" -m "$full_version"
            _push $full_version
            create_and_push_new_branch "coog-$TAG"

            git checkout master
            local dev_version;
            dev_version="${TAG:0:2}$(( ${TAG:2} + 1 ))"
            update_tryton_cfg "$dev_version.0"
            update_doc $dev_version
            git commit -am "Increase version number to $dev_version"
            _push $version
        fi
    elif [ "$(basename "$repo")" == "customers" ] && [ "$MAJOR" == false ]; then
        for branch in $(git branch -r | grep -Po "$REMOTE/\w+-$version"); do
            local_branch=$(echo "$branch" | sed -E "s:$REMOTE\/(\w+-$version):\1:")
            git checkout "$local_branch"
            git pull
            update_tryton_cfg $TAG
            git commit -am "packaging version $TAG"
            _push $local_branch
        done
    elif [ "$(basename "$repo")" == "customers" ] && [ "$MAJOR" == true ]; then
        for customer in $CUSTOMERS; do
            git checkout $customer
            git pull
            update_tryton_cfg "$TAG.0"
            git commit -am "Prepare release $TAG"

            local new_customer_branch; new_customer_branch="$customer-coog-$TAG"
            create_and_push_new_branch $new_customer_branch
            _push $new_customer_branch
            git checkout $customer
            dev_version="${TAG:0:2}$(( ${TAG:2} + 1 ))"
            update_tryton_cfg "$dev_version.0"
            git commit -am "Increase version number to $dev_version"
            _push $customer
        done
    elif [ "$(basename "$repo")" == "trytond-modules" ] && [ "$MAJOR" == true ]; then
        git checkout "$version" 
        git pull
        git submodule update

        local new_branch="coog-$TAG"
        create_and_push_new_branch $new_branch

        git submodule foreach git checkout "$version"
        git submodule foreach git pull
        git submodule foreach git checkout -b $new_branch
        if [ "$NO_PUSH" == false ]; then
            git submodule foreach git push -u $new_branch
        fi
        git commit -am "Set submodules branches to $new_branch"
        local full_version; full_version="coog-$TAG.0"
        git tag -a "$full_version" -m "$full_version"
        _push $new_branch
        _push $full_version
    elif [ "$(basename "$repo")" == "tryton" ] && [ "$MAJOR" == true ]; then
        local full_version; full_version="coog-$TAG.0"
        git checkout "$version"
        git pull
        update_client_version "$TAG"
        git commit -am "Prepare release $full_version"
        git tag -a "$full_version" -m "$full_version"
        _push $full_version
        create_and_push_new_branch "coog-$TAG"

        git checkout master
        local dev_version;
        dev_version="${TAG:0:2}$(( ${TAG:2} + 1 ))"
        update_client_version "$dev_version"
        git commit -am "Increase version number to $dev_version"
        _push $version
    elif [ "$MAJOR" == true ]; then
        git checkout "$version" 
        git pull
        create_and_push_new_branch "coog-$TAG"
        local full_version; full_version="coog-$TAG.0"
        git tag -a "$full_version" -m "$full_version"
        _push $full_version
    fi
}

main() {
    for repo in $(find "$WORKING_PATH" -name .git -type d -prune | sed 's!\.git!!'); do
        echo " "
        echo " "
        echo " "
        update_version $repo "$TAG"

        if [ "$MAJOR" == false ]; then
            if [ "$(basename "$repo")" == "customers" ]; then
                (_tag_customers "$repo")
            else
                (_tag_repository "$repo")
            fi
        fi
    done
}

# Script begins here
[ $# -lt 2 ] && echo "$USAGE" && exit 1

while [[ $# -gt 0 ]]; do

    arg="$1"
    case $arg in
        -t|--tag)
            TAG="$2"
            shift
            ;;
        -r|--remote)
            REMOTE="$2"
            shift
            ;;
        -p|--path)
            WORKING_PATH="$2"
            shift
            ;;
        -m|--major)
            MAJOR=true
            [ -z "$CUSTOMERS" ] && echo "Please set the CUSTOMERS environment variable" \
                "with the name of the development branch for each customer," \
                "e.g. 'export CUSTOMERS=\"customer1 customer2 customer3\"'" && exit 1
            ;;
        --nopush)
            NO_PUSH=true
            ;;
        *)
            echo "Invalid argument $arg."
            return 1
            ;;
    esac
    shift
done

[ -z "$TAG" ] && echo "Missing required parameter.$USAGE" && exit 1
[ -z "$REMOTE" ] && REMOTE="origin"
[ -z "$WORKING_PATH" ] && WORKING_PATH="$PWD"
[ -z "$MAJOR" ] && MAJOR=false
[ -z "$NO_PUSH" ] && NO_PUSH=false

main
